version: '3'

networks:
    myapp-backend-network:

volumes:
    myapp-minio-data:
    myapp-mysql-data:

services:
    nginx:
        image: nginx:latest
        container_name: nginx
        volumes:
            - ../../:/var/www/html
            - ./configs/nginx/default.conf:/etc/nginx/conf.d/default.conf
        ports:
            - "8080:80"
        networks:
            - myapp-backend-network
        depends_on:
            - php-fpm

    php-fpm:
        build:
            dockerfile: ../images/php-fpm/Dockerfile
            context: ../../
        container_name: php-fpm
        volumes:
            - ../../:/app
            - ./configs/php-fpm/php.ini:/usr/local/etc/php/conf.d/php-dev.ini
        environment:
            # app
            APP_KEY: "base64:+XwuTDDanq3qH7bSlZPaHPFGjvu055MTwFFKrlYSbHs="
            APP_NAME: "myapp"
            APP_ENV: "local"
            APP_DEBUG: "true"
            APP_URL: "http://localhost:8080"

            # database
            DB_HOST: "mysql"
            DB_DATABASE: ${MYSQL_DATABASE}
            DB_USERNAME: ${MYSQL_USER}
            DB_PASSWORD: ${MYSQL_PASSWORD}

            # redis
            REDIS_HOST: "redis"

            # s3
            S3_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
            S3_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
            S3_PUBLIC_BUCKET: ${S3_PUBLIC_BUCKET}
            S3_ENDPOINT: "http://minio:9000"

            # mail
            MAIL_MAILER: "smtp"
            MAIL_HOST: "mailhog"
            MAIL_PORT: "1025"
            MAIL_ENCRYPTION: "null"
            MAIL_FROM_ADDRESS: "no-reply@example.com"

            # logging
            LOG_LEVEL: "debug"

            # cache
            CACHE_DRIVER: "redis"

            # session
            SESSION_DRIVER: "redis"

            # queue
            QUEUE_CONNECTION: "sync"

        networks:
            - myapp-backend-network

    mysql:
        image: mysql:latest
        container_name: mysql
        restart: unless-stopped
        volumes:
            - myapp-mysql-data:/var/lib/mysql
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
            SERVICE_TAGS: dev
            SERVICE_NAME: mysql
        ports:
            - "3307:3306"
        networks:
            - myapp-backend-network

    redis:
        image: redis:latest
        container_name: redis
        restart: unless-stopped
        networks:
            - myapp-backend-network

    minio:
        image: minio/minio
        volumes:
            - myapp-minio-data:/data
        container_name: minio
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        command: server /data --console-address ":9001"
        ports:
            - "9011:9000"
            - "9001:9001"
        networks:
            - myapp-backend-network

    minio-mc:
        container_name: minio-mc
        image: minio/mc:RELEASE.2019-07-17T22-13-42Z
        depends_on:
            - minio
        volumes:
            - ./configs/minio-mc/create_bucket.sh:/usr/bin/create_bucket
        environment:
            MINIO_HOST: minio
            MINIO_USER: ${MINIO_ROOT_USER}
            MINIO_PASSWORD: ${MINIO_ROOT_PASSWORD}
            MINIO_BUCKET: ${S3_PUBLIC_BUCKET}
        networks:
            - myapp-backend-network

    swagger-ui:
        image: swaggerapi/swagger-ui
        container_name: swagger-ui
        ports:
            - "8091:8080"
        volumes:
            - ../../docs/openapi.yml:/usr/share/nginx/html/docs/openapi.yml
        environment:
            API_URL: docs/openapi.yml
        networks:
            - myapp-backend-network

    mailhog:
        image: mailhog/mailhog:latest
        container_name: mailhog
        ports:
            - "8092:8025"
        networks:
            - myapp-backend-network

    phpmyadmin:
        image: phpmyadmin
        restart: always
        ports:
            - "8093:80"
        environment:
            PMA_USER: ${MYSQL_USER}
            PMA_PASSWORD: ${MYSQL_PASSWORD}
            PMA_HOST: mysql
        networks:
            - myapp-backend-network
